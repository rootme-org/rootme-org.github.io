<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Ssrf - Tag - Root-Me Blog</title>
        <link>https://blog.root-me.org/tags/ssrf/</link>
        <description>Ssrf - Tag - Root-Me Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>contact@root-me.org (Root-Me)</managingEditor>
            <webMaster>contact@root-me.org (Root-Me)</webMaster><lastBuildDate>Fri, 03 Jan 2025 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://blog.root-me.org/tags/ssrf/" rel="self" type="application/rss+xml" /><item>
    <title>Code Snippet Serie - 04 - SSRF and HTTP Hop-by-Hop Header Injection</title>
    <link>https://blog.root-me.org/posts/writeup_snippet_04/</link>
    <pubDate>Fri, 03 Jan 2025 00:00:00 &#43;0000</pubDate>
    <author>baguette</author>
    <guid>https://blog.root-me.org/posts/writeup_snippet_04/</guid>
    <description><![CDATA[Challenge Description This challenge, authored by @baguette, involves exploiting vulnerabilities in a Flask application that acts as a proxy. The application is behind a cache server managed by a varnish and a load balancer managed by a nginx. The application has two main routes: / and /admin. The / route proxies requests to https://root-me.org, while the /admin route restricts access based on the presence of the X-Real-IP header.
Vulnerability Overview ðŸ›‘ Vulnerabilities: The application is vulnerable to Server-Side Request Forgery (SSRF) and HTTP Hop-by-Hop Header Injection.]]></description>
</item>
</channel>
</rss>
