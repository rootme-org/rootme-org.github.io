<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>stored - Tag - Root-Me Blog</title>
        <link>https://blog.root-me.org/tags/stored/</link>
        <description>stored - Tag - Root-Me Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>contact@root-me.org (Root-Me)</managingEditor>
            <webMaster>contact@root-me.org (Root-Me)</webMaster><lastBuildDate>Tue, 21 Feb 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://blog.root-me.org/tags/stored/" rel="self" type="application/rss+xml" /><item>
    <title>Documentation - Stored XSS</title>
    <link>https://blog.root-me.org/posts/stored_xss/</link>
    <pubDate>Tue, 21 Feb 2023 00:00:00 &#43;0000</pubDate>
    <author>Ruulian, Podalirius</author>
    <guid>https://blog.root-me.org/posts/stored_xss/</guid>
    <description><![CDATA[Prerequisites To understand the whole article, you will need:
 Know HTML Know the basics of PHP and Javascript Know what an XSS is  DÃ©finition A stored XSS is possible when the user input is stored in a database and displayed on the page. An example is a forum page.
Explanation of the vulnerability Let&rsquo;s take as an example a forum page that displays the posted messages.
Here is the part of the PHP code that displays the messages:]]></description>
</item>
</channel>
</rss>
