<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>code snippet - Tag - Root-Me Blog</title>
        <link>https://blog.root-me.org/tags/code-snippet/</link>
        <description>code snippet - Tag - Root-Me Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>contact@root-me.org (Root-Me)</managingEditor>
            <webMaster>contact@root-me.org (Root-Me)</webMaster><lastBuildDate>Tue, 05 Nov 2024 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://blog.root-me.org/tags/code-snippet/" rel="self" type="application/rss+xml" /><item>
    <title>Code Snippet Serie - 02 - Memory Exhaustion via Unchecked Input Length</title>
    <link>https://blog.root-me.org/posts/writeup_snippet_02/</link>
    <pubDate>Tue, 05 Nov 2024 00:00:00 &#43;0000</pubDate>
    <author>Ethnical</author>
    <guid>https://blog.root-me.org/posts/writeup_snippet_02/</guid>
    <description><![CDATA[Challenge Description This challenge, authored by @Ethnical and @fadam, involves exploiting a vulnerability in a blockchain network server that processes incoming network messages. The vulnerability allows an attacker to cause a Denial of Service (DoS) by exhausting the server&rsquo;s memory.
Vulnerability Overview ðŸ›‘ Vulnerability: The vulnerability lies in the unchecked allocation of memory based on user-controlled input length, leading to potential memory exhaustion.
Technical Analysis Vulnerability Details   Unchecked Length Parameter:]]></description>
</item>
<item>
    <title>Code Snippet Serie - 01 - SQL Like injection</title>
    <link>https://blog.root-me.org/posts/writeup_snippet_01/</link>
    <pubDate>Fri, 04 Oct 2024 00:00:00 &#43;0000</pubDate>
    <author>Elweth</author>
    <guid>https://blog.root-me.org/posts/writeup_snippet_01/</guid>
    <description><![CDATA[Challenge Description This challenge, authored by @Elweth, involves exploiting a vulnerability in a SQL Query which lets you abuse the LIKE clause to first bypass authentication and then retrieve the entire API key.
Vulnerability Overview ðŸ›‘ Vulnerability: The vulnerability lies in the SQL query, which remains vulnerable despite the use of the prepare statement system in Python.
Conventional SQL injection exploitation methods won&rsquo;t work here, because the query is correctly prepared with python.]]></description>
</item>
</channel>
</rss>
